# Арифметическая сумма двух целочисленных выражений
print(2 + 3)

# Разность двух целочисленных выражений
print(10 - 3)

# Произведение двух целочисленных выражений
print(4 * 3)

# В python мы можем легко считать произведения "больших" чисел
print(678567543234356 * 67564534354656)

# Мы можем использовать сложные выражения
print(3 + 5 * 4)

# В сложных выражениях мы можем форсировать приоритет исполнения операций
print((3 + 5) * 4)

# Задание 1
print("Задание 1: произведение чисел 11111 (5 единиц) и 1111111 (7 единиц)")
print(11111 * 1111111)

# Целочисленное деление
print(40 // 8)
# Ответ - 5, так как 8 * 5 = 40
print(42 // 8)
# Ответ - тоже 5, так как 42 = 8 * 5 + 2

# Остаток от деления
print(42 % 8)
# Ответ - 2, так как 42 = 5 * 8 + 2

# Операцию остатка от деления можно использовать для вычисления последней цифры числа
print(239 % 10)
# Ответ - 9

# Аналогично, операцию целочисленного деления можно использовать для вычисления части числа без последней цифры
print(239 // 10)
# Ответ - 23

# Возведение в степень
print(2 ** 5)

# Задание 3
print("Составьте выражение для вычисления в интерпретаторе Python 3 и вставьте в поле ответа результат вычисления: 2014^{14}")
print(2014 ** 14)

# Все вышеперечисленные операторы - бинарные, однако, существуют и унарные, принимающие
# в качестве параметра всего один аргумент

# Взятие числа с противоположным знаком
print(- 42)

# Сохранение знака у числа
# Тут должно было быть выражение =42, но print не перегружен для такого рода деятельности

# Синтаксическая конструкция такого рода тоже будет выполнима
print(+ - + 42)
# Ответ - -42

# Однако, не все конструкции являются синтаксически корректными
# print(- * 42) -> Syntax Error: invalid syntax

# Помимо синтаксических, бывают другие типы ошибок, когда все записано верно, но результат не вычисляем.
# print(5 // 0) -> ZeroDivisionError: integer division or modulo by zero



