'''
Пока мы рассматривали строки как неделимый объекты
Строки являются последовательностью символов, поэтому логично, что можно обращаться к отдельному их символу

genome = 'ATGG'

genome[0] A     genome[-1] G - 1 символ с конца
genome[1] T     genome[-2] G - 2 символ с конца
genome[2] G     genome[-3] T
genome[3] G     genome[-4] A

Допустима индексация через переменные
i = 1
print(genome[i]) T

!! Строки неизменяемы

genome = 'ATGG'
genome[1] = 'C' - ошибка

Если хочется строку изменить, то необходимо явным образом создать копию строки, где символ будет изменён.

Перечисление символов строки с помощью индексов:
genome = 'ATGG'
for i in range(4)
    print(genome[i])
A
T
G
G

Однако, цикл for можно использовать для поочередного перечисления всех символов строки
genome = 'ATTG'
for c in genome
    print(c)
A
T
T
G

Задача:
Дана геномная последовательность.
Вывести, сколько раз в ней встречается нуклеотид цитозин.
Входные данные:
CACCTGGAC (C)
Выходные данные:
4

genome = input()
cnt = 0
for nucl in genome:
    if nucl == 'C'
        cnt += 1
print(cnt)

Другое решение - очень простое
genome = input()
print(genome.count('C'))

Строки имеют методы
s.count(p) - сколько раз строка p встречается в строке s

Полезно будет добавить, что в квадратных скобках может быть два и даже три параметра. Параметры записываются так
Var[A:B:C]. эти параметры, если их больше одного, ведут себя как оператор range().
Первый параметр означает с какого индекса начинать, второй означает на каком индексе закончить (не включая этот индекс)
и третий - шаг (по умолчанию 1).

Такое обращение со строкой позволяет выбирать не один а несколько символов или часть строки.
Где А - индекс первого символа. Если его оставить пустым (например, Var[:B]),
то перебираться будут все символы с начала строки и до В.
B - (необязательный) индекс последнего символа. Если его оставить пустым (например, Var[A:]), то перебираться будут все
символы начиная от A и до конца строки.
С - (необязательный) шаг, через который выбираются символы. По умолчанию, если не указать, равен 1 - т.е перебираются
все символы по порядку.

Примеры: var="Hello!"
var[0] -> 'H' - только первый символ
var[1:] -> 'ello!' - все символы начиная со второго
var[:3] -> 'Hell' - все символы до четвертого
var[1:4] -> 'ello' - символы со второго по пятый
var[::] -> 'Hello!' - выведутся все символы
var[::2] -> 'Hlo' - здесь выбирается каджый второй символ строки, т.е. 0й 2й и 4й
var[::-1] -> '!olleH'- выведутся все символы, но с шагом -1 - каждый символ, но в обратном порядке.

Некоторые методы у строк:
s = 'aTGcc' p = 'cc'
- s.upper() -> 'ATGCC'
- s.lower() -> 'atgcc'
- s.count(p) -> сколько раз p встречается в s
- s.find(p) -> первое вхождение (индекс) p в s
- s.find('A') -> -1, строка 'A' не входит в s
Проверка вхождения в строку if 'TG' in s:
- s.replace('c', 'C') -> 'aTGCC' - замена всех вхождений на символ второго аргумента

Последовательные вызовы методов
s = 'agTtcAGtc'
s.upper().count('gt'.upper())
Результат - 2

'''